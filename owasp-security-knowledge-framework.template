{"AWSTemplateFormatVersion":"2010-09-09","Description":"Sets up a running instance of the OWASP Security Knowledge Framework","Parameters":{"Subnets":{"Description":"The subnets where the OWASP SKF will run","Type":"List<AWS::EC2::Subnet::Id>"},"VpcId":{"Description":"The VPC in which the OWASP SKF will run","Type":"AWS::EC2::VPC::Id"},"KeyName":{"Description":"An ssh keypair to put on the OWASP SKF instance","Type":"AWS::EC2::KeyPair::KeyName"},"HttpsAccessCidr":{"Description":"A CIDR from which https access to the OWASP SKF's load balancers is allowed","Type":"String","AllowedPattern":"^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}/[0-9]{1,2}$","ConstraintDescription":"Parameter should be a CIDR block e.g. \"1.2.3.4/32\""},"SSHAccessCidr":{"Description":"A CIDR from which SSH access to the OWASP SKF instance is allowed","Type":"String","AllowedPattern":"^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}/[0-9]{1,2}$","ConstraintDescription":"Parameter should be a CIDR block e.g. \"1.2.3.4/32\""},"SSLCertificateArn":{"Description":"ARN of SSL certifcate the ELBs should use","Type":"String"},"DataBucketName":{"Description":"Name to use for the S3 bucket that persists the database","Type":"String"}},"Mappings":{"Constants":{"App":{"Value":"security-knowledge-framework"}}},"Resources":{"DataBucket":{"Type":"AWS::S3::Bucket","Properties":{"AccessControl":"Private","BucketName":{"Ref":"DataBucketName"}}},"LoadBalancerSecurityGroup":{"Type":"AWS::EC2::SecurityGroup","Properties":{"GroupDescription":"HTTPS access to the load balancer from the CIDR block","VpcId":{"Ref":"VpcId"},"SecurityGroupIngress":[{"IpProtocol":"tcp","FromPort":443,"ToPort":443,"CidrIp":{"Ref":"HttpsAccessCidr"}}],"Tags":[{"Key":"App","Value":{"Fn::FindInMap":["Constants","App","Value"]}}]}},"InstanceSecurityGroup":{"Type":"AWS::EC2::SecurityGroup","Properties":{"GroupDescription":"SKF EC2 instance","VpcId":{"Ref":"VpcId"},"SecurityGroupIngress":[{"IpProtocol":"tcp","FromPort":8001,"ToPort":8001,"SourceSecurityGroupId":{"Ref":"LoadBalancerSecurityGroup"}},{"IpProtocol":"tcp","FromPort":22,"ToPort":22,"CidrIp":{"Ref":"SSHAccessCidr"}}],"SecurityGroupEgress":[{"IpProtocol":"tcp","FromPort":80,"ToPort":80,"CidrIp":"0.0.0.0/0"},{"IpProtocol":"tcp","FromPort":443,"ToPort":443,"CidrIp":"0.0.0.0/0"}],"Tags":[{"Key":"App","Value":{"Fn::FindInMap":["Constants","App","Value"]}}]}},"InstanceRole":{"Type":"AWS::IAM::Role","Properties":{"AssumeRolePolicyDocument":{"Statement":[{"Effect":"Allow","Principal":{"Service":["ec2.amazonaws.com"]},"Action":["sts:AssumeRole"]}]},"Path":"/","Policies":[{"PolicyName":"skf-instance-policy","PolicyDocument":{"Statement":[{"Effect":"Allow","Resource":{"Fn::Join":["",["arn:aws:s3",":::",{"Ref":"DataBucketName"}]]},"Action":["s3:ListBucket"]},{"Effect":"Allow","Resource":{"Fn::Join":["",["arn:aws:s3",":::",{"Ref":"DataBucketName"},"/*"]]},"Action":["s3:GetObject","s3:PutObject","s3:PutObjectAcl"]}]}}]}},"InstanceProfile":{"Type":"AWS::IAM::InstanceProfile","Properties":{"Path":"/","Roles":[{"Ref":"InstanceRole"}]}},"LoadBalancer":{"Type":"AWS::ElasticLoadBalancing::LoadBalancer","Properties":{"Listeners":[{"LoadBalancerPort":443,"Protocol":"HTTPS","SSLCertificateId":{"Ref":"SSLCertificateArn"},"InstanceProtocol":"HTTP","InstancePort":8001}],"CrossZone":true,"HealthCheck":{"Target":"HTTP:8001/","HealthyThreshold":2,"UnhealthyThreshold":10,"Interval":30,"Timeout":10},"Subnets":{"Ref":"Subnets"},"SecurityGroups":[{"Ref":"LoadBalancerSecurityGroup"}],"Tags":[{"Key":"App","Value":{"Fn::FindInMap":["Constants","App","Value"]}}]}},"LaunchConfig":{"Type":"AWS::AutoScaling::LaunchConfiguration","Properties":{"KeyName":{"Ref":"KeyName"},"ImageId":"ami-6c14310f","SecurityGroups":[{"Ref":"InstanceSecurityGroup"}],"InstanceType":"t2.nano","IamInstanceProfile":{"Ref":"InstanceProfile"},"AssociatePublicIpAddress":true,"UserData":{"Fn::Base64":{"Fn::Join":["",["#!/bin/bash -ev\n","s3bucket=",{"Ref":"DataBucketName"},"\n# install dependencies\nlocale-gen en_GB.UTF-8\napt-get --yes update\napt-get install --yes git apache2 libapache2-mod-wsgi sqlite3 lib32z1-dev python-dev libxml2-dev libxslt-dev libffi-dev libssl-dev python-pip\na2enmod wsgi\npip install awscli https://github.com/mitsuhiko/flask/tarball/master owasp-skf\n\n# setup skf\nmkdir /owaspskf\ncd /owaspskf\ngit clone https://github.com/blabla1337/skf-flask.git\ncd skf-flask/skf\n\n# remove adhoc SSL\nsed -i \"s/, ssl_context='adhoc'//\" skf.py\n\n# fetch db from persistent storage\naws s3 cp s3://$s3bucket/owaspskf/skf.db skf.db || true\n\n# application wsgi file\ncat <<SKF_APP_WSGI > skf.wsgi\nimport sys, os\nsys.path.insert (0,'/owaspskf/skf-flask/skf')\nos.chdir(\"/owaspskf/skf-flask/skf\")\nfrom skf import app as application\nSKF_APP_WSGI\n\n# apache config\ncd /etc/apache2/sites-available/\n\ncat <<SKF_APACHE_CONF > skf.conf\nWSGIRestrictStdout Off\nListen 8001\n<VirtualHost *:8001>\n\n    WSGIDaemonProcess skf user=www-data group=www-data threads=5\n    WSGIScriptAlias / /owaspskf/skf-flask/skf/skf.wsgi\n\n    <Directory /owaspskf/skf-flask/skf>\n        WSGIProcessGroup skf\n        WSGIApplicationGroup %{GLOBAL}\n        Order deny,allow\n        Allow from all\n        Require all granted\n    </Directory>\n\n</VirtualHost>\nSKF_APACHE_CONF\n\na2dissite 000-default.conf\na2ensite skf.conf\n\n# fix perms\nchmod +x /owaspskf/skf-flask/skf/skf.py\nchown -R www-data:www-data /owaspskf/skf-flask\n\n# restart apache\nsudo service apache2 restart\n\n# schedule regular sync of the sqlite database\ntouch /owaspskf/cron-lastrun.log\nchown www-data /owaspskf/cron-lastrun.log\ncat <<SKF_CRON > /etc/cron.d/skf\n*/5 * * * *  www-data  /usr/local/bin/aws s3 cp /owaspskf/skf-flask/skf/skf.db s3://$s3bucket/owaspskf/skf.db > /owaspskf/cron-lastrun.log 2>&1\nSKF_CRON\n"]]}}}},"AutoscalingGroup":{"Type":"AWS::AutoScaling::AutoScalingGroup","Properties":{"AvailabilityZones":["ap-southeast-2a"],"VPCZoneIdentifier":{"Ref":"Subnets"},"LaunchConfigurationName":{"Ref":"LaunchConfig"},"MinSize":0,"MaxSize":1,"DesiredCapacity":1,"HealthCheckType":"ELB","HealthCheckGracePeriod":120,"LoadBalancerNames":[{"Ref":"LoadBalancer"}],"Tags":[{"Key":"Name","Value":{"Fn::FindInMap":["Constants","App","Value"]},"PropagateAtLaunch":true},{"Key":"App","Value":{"Fn::FindInMap":["Constants","App","Value"]},"PropagateAtLaunch":true}]}}},"Outputs":{"LoadBalancerUrl":{"Value":{"Fn::GetAtt":["LoadBalancer","DNSName"]}}}}
